name: Create Hetzner server
on:
  workflow_dispatch:

jobs:
  create_server:
    runs-on: ubuntu-latest
    env:
      TF_VAR_HCLOUD_TOKEN: ${{ secrets.TF_VAR_HCLOUD_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Create SSH key files
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.ACTIONS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.HETZNER_SSH_KEY }}" > id_rsa.pub
          echo "${{ secrets.ACTIONS_SSH_KEY }}" > id_rsa_github.pub

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: |
          export exitcode=0
          terraform apply -auto-approve -input=false || export exitcode=$?
          
          if [ $exitcode -eq 1 ]; then
            # Try to refresh state if applied failed
            terraform apply -refresh-only -auto-approve -input=false
          else 
            echo "Terraform apply created server successfully"
          fi

      - name: Save server IP address as output
        run: |
          export server_ip="0.0.0.0"
          terraform output -raw server_ip | export server_ip=$?
          echo "SERVER_IP=$server_ip" >> $GITHUB_OUTPUT

  print_server_ip:
    needs: create_server
    runs-on: ubuntu-latest
    steps:
      - name: Print server IP
        run: echo ${{ steps.create_server.outputs.SERVER_IP }}


#  sleep:
#    runs-on: ubuntu-latest
#    needs: create_server
#    steps:
#      - name: Wait for server to be ready
#        run: sleep 90

#  TODO: add ip to known hosts
# echo "${{ needs.create_server.outputs.server_ip }}" > ~/.ssh/known_hosts

# setup-server:
#   runs-on: ubuntu-latest
#   env:
#     SSH_CONNECTION: ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}